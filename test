#!/bin/bash

# Local test runner for zsh-system-update
# This script allows developers to run tests locally before pushing

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "zsh-system-update.plugin.zsh" ]; then
    print_error "Run this script from the project root directory"
    exit 1
fi

# Check dependencies
check_dependencies() {
    print_header "Checking dependencies"
    
    local missing_deps=()
    
    if ! command -v zsh >/dev/null 2>&1; then
        missing_deps+=("zsh")
    fi
    
    if ! command -v shellcheck >/dev/null 2>&1; then
        print_warning "shellcheck not found - skipping lint tests"
        SKIP_LINT=true
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing dependencies: ${missing_deps[*]}"
        echo "Install with: sudo apt-get install ${missing_deps[*]}"
        exit 1
    fi
    
    print_success "Dependencies check passed"
}

# Run the main test suite
run_tests() {
    print_header "Running test suite"
    
    if [ ! -f "tests/test-zsh-system-update.sh" ]; then
        print_error "Test file not found: tests/test-zsh-system-update.sh"
        exit 1
    fi
    
    chmod +x tests/test-zsh-system-update.sh
    
    if ./tests/test-zsh-system-update.sh; then
        print_success "Test suite passed"
    else
        print_error "Test suite failed"
        exit 1
    fi
}

# Run linting
run_lint() {
    if [ "$SKIP_LINT" = true ]; then
        print_warning "Skipping lint tests (shellcheck not available)"
        return 0
    fi
    
    print_header "Running lint checks"
    
    # ShellCheck with appropriate options for zsh
    if shellcheck -s bash -x zsh-system-update.plugin.zsh; then
        print_success "Plugin lint check passed"
    else
        print_warning "Plugin has lint warnings (this may be expected for zsh-specific syntax)"
    fi
    
    if shellcheck tests/test-zsh-system-update.sh; then
        print_success "Test script lint check passed"
    else
        print_error "Test script has lint errors"
        exit 1
    fi
}

# Basic security checks
run_security_checks() {
    print_header "Running security checks"
    
    # Check for dangerous patterns
    if grep -n "rm -rf \$" zsh-system-update.plugin.zsh; then
        print_error "Found potentially dangerous rm command"
        exit 1
    fi
    
    # Check for hardcoded secrets
    if grep -i "password\|secret\|token" zsh-system-update.plugin.zsh; then
        print_warning "Found potential hardcoded secrets"
    fi
    
    print_success "Security checks passed"
}

# Check documentation
check_documentation() {
    print_header "Checking documentation"
    
    local missing_files=()
    
    for file in README.md CHANGELOG.md CONTRIBUTING.md LICENSE; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -ne 0 ]; then
        print_error "Missing documentation files: ${missing_files[*]}"
        exit 1
    fi
    
    # Check README sections
    for section in "Installation" "Usage" "Options"; do
        if ! grep -q "$section" README.md; then
            print_warning "README missing $section section"
        fi
    done
    
    print_success "Documentation check passed"
}

# Test plugin loading
test_plugin_loading() {
    print_header "Testing plugin loading"
    
    if zsh -c "source ./zsh-system-update.plugin.zsh; echo 'Plugin loaded successfully'" >/dev/null 2>&1; then
        print_success "Plugin loads without errors"
    else
        print_error "Plugin failed to load"
        exit 1
    fi
    
    if zsh -c "source ./zsh-system-update.plugin.zsh; zsh-system-update --help" >/dev/null 2>&1; then
        print_success "Plugin help function works"
    else
        print_error "Plugin help function failed"
        exit 1
    fi
}

# Show usage
show_usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h     Show this help message"
    echo "  --quick, -q    Run only essential tests (faster)"
    echo "  --lint-only    Run only linting checks"
    echo "  --no-lint      Skip linting checks"
    echo ""
    echo "Examples:"
    echo "  $0             Run all tests"
    echo "  $0 --quick     Run essential tests only"
    echo "  $0 --lint-only Run linting only"
}

# Parse command line arguments
QUICK_MODE=false
LINT_ONLY=false
SKIP_LINT=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_usage
            exit 0
            ;;
        --quick|-q)
            QUICK_MODE=true
            shift
            ;;
        --lint-only)
            LINT_ONLY=true
            shift
            ;;
        --no-lint)
            SKIP_LINT=true
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    echo -e "${BLUE}zsh-system-update Local Test Runner${NC}"
    echo "Running tests in: $(pwd)"
    
    check_dependencies
    
    if [ "$LINT_ONLY" = true ]; then
        run_lint
        print_success "Lint-only mode completed"
        exit 0
    fi
    
    test_plugin_loading
    run_tests
    
    if [ "$QUICK_MODE" = false ]; then
        if [ "$SKIP_LINT" != true ]; then
            run_lint
        fi
        run_security_checks
        check_documentation
    fi
    
    print_header "Test Summary"
    print_success "All tests completed successfully!"
    
    if [ "$QUICK_MODE" = true ]; then
        echo -e "${YELLOW}Note: Ran in quick mode. Run without --quick for full test suite.${NC}"
    fi
}

# Run main function
main "$@"